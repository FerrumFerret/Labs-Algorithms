#include <iostream>

using namespace std;

const int n = 5;
bool *visited = new bool[n];
bool *visited2 = new bool[n];
int graph[n][n] =
{
{0, 1, 1, 0, 0},
{1, 0, 0, 1, 1},
{1, 0, 0, 0, 0},
{0, 1, 0, 0, 0},
{0, 1, 0, 0, 0}
};

//Поиск в глубину
void ds(int sn){
	cout << sn + 1 << " ";
	visited[sn] = true;
	for (int i = 0; i < n; i++)
		if ((graph[sn][i] != 0) && (!visited[i])) {
			ds(i);
		}
}

//Поиск в ширину
void bs(bool *visited2, int sn)
{
	int *queue = new int[n];
	int count = 0, head = 0;
	for (int i = 0; i < n; i++) {
		queue[i] = 0;
	}
	queue[count++] = sn;
	visited2[sn] = true;
	while (head < count){
		sn = queue[head++];
		cout << sn + 1 << " ";
		for (int i = 0; i < n; i++)
			if ((graph[sn][i] != 0) && (!visited2[i])){
				queue[count++] = i;
				visited2[i] = true;
			}
	}
	delete[]queue;
}

int main()
{
	int start;
	cout << "Adjacency matrix: " << endl;
	for (int i = 0; i < n; i++)
	{
		visited[i] = false;
		visited2[i] = false;
		for (int j = 0; j < n; j++)
			cout << " " << graph[i][j];
		cout << endl;
	}
	cout << "start(from 1 to " << n << "): "; cin >> start;
	bool *vis = new bool[n];
	cout << "depth search order: ";
	ds(start - 1);
	delete[]visited;
	bool *vis2 = new bool[n];
	cout << endl << "Breadth search order: ";
	bs(visited2, start - 1);
	delete[]visited2;
}
